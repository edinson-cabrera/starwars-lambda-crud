# serverless.yml
org: loomystudios
app: starwars-server
service: starwars-internal-crud

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: dev
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:975050061581:table/people"
    - Effect: Allow
      Action:
        - states:StartExecution
        - sns:Publish
      Resource:
        - !Ref CharacterCreationTopic
        - !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:character-creation-workflow-${self:provider.stage}

  environment:
    REGION: ${self:provider.region}
    CHARACTER_CREATION_STATE_MACHINE_ARN: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:character-creation-workflow-${self:provider.stage}
    STAGE: ${self:provider.stage}

functions:
  hello:
    handler: src/main.getListPeople
    events:
      - httpApi:
          path: /list
          method: GET
  
  createPerson:
    handler: src/main.createPerson
    name: CreateCharacterFunction
    events:
      - httpApi:
          path: /create
          method: POST

  getStarWarsCharacters:
    handler: src/main.getStarWarsCharacters
    events:
      - httpApi:
          path: /starwars/list
          method: GET

  validateCharacter:
    handler: src/infrastructure/functions/validate-character.validateCharacter
    name: ValidateCharacterFunction
    environment:
      REGION: ${self:provider.region}
  
  sendNotification:
    handler: src/infrastructure/functions/send-notification.sendNotification
    name: SendNotificationFunction
    environment:
      REGION: ${self:provider.region}
      CHARACTER_CREATION_TOPIC_ARN: !Ref CharacterCreationTopic

stepFunctions:
  stateMachines:
    characterCreationWorkflow:
      name: character-creation-workflow-${self:provider.stage}
      definition:
        StartAt: ValidateCharacter
        States:
          ValidateCharacter:
            Type: Task
            Resource:
              Fn::GetAtt: [ValidateCharacterLambdaFunction, Arn]
            Next: ValidationChoice
          
          ValidationChoice:
            Type: Choice
            Choices:
              - Variable: "$.isValid"
                BooleanEquals: true
                Next: CreateCharacter
              - Variable: "$.isValid"
                BooleanEquals: false
                Next: ValidationFailed
          
          CreateCharacter:
            Type: Task
            Resource:
              Fn::GetAtt: [CreatePersonLambdaFunction, Arn]
            Next: SendNotification
            
          SendNotification:
            Type: Task
            Resource:
              Fn::GetAtt: [SendNotificationLambdaFunction, Arn]
            End: true
            
          ValidationFailed:
            Type: Fail
            Error: "ValidationError"
            Cause: "Character validation failed"

resources:
  Resources:
    CharacterCreationTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: character-creation-notifications-${self:provider.stage}
        
    CharacterCreationTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: states.amazonaws.com
              Action: sns:Publish
              Resource: !Ref CharacterCreationTopic
        Topics:
          - !Ref CharacterCreationTopic

build:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    exclude:
      - aws-sdk
    external:
      - 'class-transformer'
      - 'class-validator'
      - '@nestjs/microservices/microservices-module'
      - '@nestjs/microservices'
      - '@nestjs/websockets/socket-module'
      - '@fastify/static'
      - '@fastify/view'
    platform: 'node'
    target: 'node20'